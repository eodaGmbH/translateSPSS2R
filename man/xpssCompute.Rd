% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/xpssCompute.R
\name{xpssCompute}
\alias{xpssCompute}
\title{Creates data}
\usage{
xpssCompute(x, fun = NULL,...)
}
\arguments{
\item{x}{input data .}

\item{fun}{atomic character as functionname.}

\item{...}{further arguments passed to or from other methods.}
}
\value{
Output is a created vector.
}
\description{
R implementation of the SPSS \code{COMPUTE} argument.
}
\details{
It is possible to fill more than one variable in any compute helper function. Because of this, there are special cases between numeric and character operations.

For \code{numeric} input data, it is possible to chose a \code{atomic numeric}, an \code{numeric vector} or a \code{numeric matrix} as the input data. The only restriction is, that the data has to be of the same length as the output data. If the data is too short or too long, an failure will produced. \cr \cr
For \code{character} input data, it is possible to chose a \code{atomic character}, an \code{character vector} or a \code{character matrix}. The restriction for the input data is the same as for the numeric data, output and input data has to be of the same length. \cr \cr
A special case for input data is a numeric or character matrix. If the matrix gets initialised via \code{\link{cbind}} and assigned to an existing dataset, the returned data get saved in one variable with n coloumns. For example, the input data contains 3 coloumns and every coloumn contains 20 observations, the complete matrix [1:20,1:3] gets stored in one variable, respectively one coloumn, within the customized dataset.
If a new matrix gets applied, the coloumns get stored coloumn by coloumn in the new variable.

\strong{Numeric Fuctions:}
\tabular{rll}{
\tab \code{Functionname} \tab \code{Output}
\cr \tab \code{\link{computeAbs}} \tab Computes the absolute value.
\cr \tab \code{\link{computeArsin}} \tab Computes the arc-sine.
\cr \tab \code{\link{computeArtan}} \tab Computes the arc-tan.
\cr \tab \code{\link{computeCos}} \tab Computes the cosinus.
\cr \tab \code{\link{computeExp}} \tab Computes the exponential.
\cr \tab \code{\link{computeLn}} \tab Computes the logarithmus naturalis.
\cr \tab \code{\link{computeLog10}} \tab Computes the logarithmus base 10.
\cr \tab \code{\link{computeLngamma}} \tab Computes the logarithmus of the gamma function.
\cr \tab \code{\link{computeMax}} \tab Computes the maxima.
\cr \tab \code{\link{computeMean}} \tab Computes the atithmetic mean.
\cr \tab \code{\link{computeMedian}} \tab Computes the median value.
\cr \tab \code{\link{computeMin}} \tab Computes the minima.
\cr \tab \code{\link{computeMod}} \tab Computes the remainder of a division.
\cr \tab \code{\link{computeRnd}} \tab Computes rounded values.
\cr \tab \code{\link{computeSd}} \tab Computes the standard deviation.
\cr \tab \code{\link{computeVariance}} \tab Computes the variance.
}

\strong{Character Fuctions:}
\tabular{rll}{
\tab \code{Functionname} \tab \code{Output}
\cr \tab \code{\link{computeChar_index}} \tab Returns the position of the first occurence of a pattern.
\cr \tab \code{\link{computeChar_length}} \tab Computes the length of a string in characters.
\cr \tab \code{\link{computeChar_lpad}} \tab Returns an expanded strings.
\cr \tab \code{\link{computeChar_mblen}} \tab Computes the byte per character or sign.
\cr \tab \code{\link{computeChar_rindex}} \tab Returns the position of the last occurence of a pattern.
\cr \tab \code{\link{computeConcat}} \tab  Returns a concatenated string.
\cr \tab \code{\link{computeLength}} \tab Computes Number of bytes in a string.
\cr \tab \code{\link{computeLower}} \tab Returns the input data to lower-case.
\cr \tab \code{\link{computeLtrim}} \tab Returns a trimmed string (left side trimmed).
\cr \tab \code{\link{computeReplace}} \tab Replaces a pattern in a string.
\cr \tab \code{\link{computeRtrim}} \tab Returns a trimmed string (right side trimmed).
\cr \tab \code{\link{computeStrunc}} \tab Returns a truncated string.
\cr \tab \code{\link{computeUpcase}} \tab Returns the input data to upper-case.
}

\strong{Date Fuctions:}
\tabular{rll}{
\tab \code{Functionname} \tab \code{Output}
\cr \tab \code{\link{computeCtime_days}} \tab Computes the difference of time between two dates in days.
\cr \tab \code{\link{computeCtime_hours}} \tab Computes the difference of time between two dates in hours.
\cr \tab \code{\link{computeCtime_minutes}} \tab Computes the difference of time between two dates in minutes.
\cr \tab \code{\link{computeCtime_seconds}} \tab Computes the difference of time between two dates in seconds.
\cr \tab \code{\link{computeDate_dmy}} \tab Computes a date with the format day-month-year.
\cr \tab \code{\link{computeDate_mdy}} \tab  Computes a date with the format month-day-year.
\cr \tab \code{\link{computeDate_moyr}} \tab Computes a date with the format month-year.
\cr \tab \code{\link{computeDate_qyr}} \tab Computes a date with the format year/quarter.
\cr \tab \code{\link{computeDate_wkyr}} \tab Computes a date with the format year/calendar week.
\cr \tab \code{\link{computeDate_yrday}} \tab Computes a date with the format year/yearday.
\cr \tab \code{\link{computeTime_days}} \tab Computes the number of passed hours on basis of the given days
\cr \tab \code{\link{computeTime_hms}} \tab Computes a date with the format Hour-Minute-Second

\cr \tab \code{\link{computeXdate_date}} \tab Extracts the date out of a date string.
\cr \tab \code{\link{computeXdate_hour}} \tab Extracts the hour value out of a given date.
\cr \tab \code{\link{computeXdate_jday}} \tab Computes the date of year on basis of a given date.
\cr \tab \code{\link{computeXdate_mday}} \tab Extracts the date of month on basis of a given date.
\cr \tab \code{\link{computeXdate_minute}} \tab Extracts the minute component on basis of a given date.
\cr \tab \code{\link{computeXdate_month}} \tab Extracts the month component on basis of a given date.
\cr \tab \code{\link{computeXdate_quarter}} \tab Computes the quarter on basis of a given date.
\cr \tab \code{\link{computeXdate_second}} \tab Extracts the second on basis of a given date.
\cr \tab \code{\link{computeXdate_tday}} \tab Computes the difference of days between the entered date and October 14, 1582.
\cr \tab \code{\link{computeXdate_time}} \tab Extracts the time componente on basis of a given date.
\cr \tab \code{\link{computeXweek}} \tab Calcualtes the calendar week on basis of a given date.
\cr \tab \code{\link{computeXwkday}} \tab Calcualtes the day of week on basis of a given date.
\cr \tab \code{\link{computeXyear}} \tab Extracts the year on basis of a given date.
}

Be careful about the input format of the numeric values in your data. It is possible to specify values which are outside the of valid range. \cr Those failures are called \code{Domain Errors}.
\cr \cr \strong{For example}:
\tabular{rll}{
\tab \code{Functionname / Operator} \tab \code{Output}
\cr \tab **  \tab A negative number to a noninteger power.
\cr \tab /	\tab A divisor of 0.
\cr \tab computeArsin \tab  An argument whose absolute value exceeds 1.
\cr \tab computeExp \tab An argument that produces a result too large to be represented on the computer.
\cr \tab computeLg10 \tab	A negative or 0 argument.
\cr \tab computeLn	\tab A negative or 0 argument.
\cr \tab computeMod \tab A divisor of 0.
\cr \tab computeSqrt \tab	A negative argument.
}
}
\examples{
# load data
data(fromXPSS)
xpssCompute(x=fromXPSS$V1,fun=mean)
}
\author{
Bastian Wiessner
}
\seealso{
Related Functions \code{\link{xpssNumeric}} \code{\link{xpssString}}
}

